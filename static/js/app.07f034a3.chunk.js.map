{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","useEffect","getItem","s","parse","console","log","loadToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","returnKeyType","onSubmitEditing","newToDos","Date","now","onChangeText","payload","autoCorrect","value","placeholder","input","ScrollView","Object","keys","map","key","index","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignContent"],"mappings":"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","file":"static/js/app.07f034a3.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./color\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { SyntheticPlatformEmitter } from \"expo-modules-core\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      if (s) {\n        setToDos(JSON.parse(s));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const addToDo = async () => {\n    try {\n      if (text === \"\") {\n        return;\n      }\n      const newToDos = { ...toDos, [Date.now()]: { text, working } };\n      setToDos(newToDos);\n      // 저장소에 저장\n      await saveToDos(newToDos);\n      // save to do\n      setText(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        returnKeyType=\"done\"\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        autoCorrect\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key, index) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={index}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={18} color={theme.grey} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n// 사용자가 다른 곳에 가거나, 앱을 닫고 다시 돌아와도 정보가 날아가지 않게 하도록 하기 위해\n// 저장소를 사용해야 한다.\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginTop: 20,\n    fontSize: 18,\n    marginVertical: 20,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignContent: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n\n// Challenge\n\n// 1. 끝난 지점에서 앱을 다시 켰을떄 시작하게 하기\n// 2. 완성 기능 추가하기\n// 3. 유저가 text를 수정 가능하게 해보기\n\n// 삭제 완료 수정\n"],"sourceRoot":""}